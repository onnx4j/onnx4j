// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx/onnx-operators.proto3

package org.onnx4j.prototypes;

public final class OnnxOperatorsProto3 {
  private OnnxOperatorsProto3() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Operator/function status.
   * </pre>
   *
   * Protobuf enum {@code onnx.OperatorStatus}
   */
  public enum OperatorStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EXPERIMENTAL = 0;</code>
     */
    EXPERIMENTAL(0),
    /**
     * <code>STABLE = 1;</code>
     */
    STABLE(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>EXPERIMENTAL = 0;</code>
     */
    public static final int EXPERIMENTAL_VALUE = 0;
    /**
     * <code>STABLE = 1;</code>
     */
    public static final int STABLE_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OperatorStatus valueOf(int value) {
      return forNumber(value);
    }

    public static OperatorStatus forNumber(int value) {
      switch (value) {
        case 0: return EXPERIMENTAL;
        case 1: return STABLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OperatorStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OperatorStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OperatorStatus>() {
            public OperatorStatus findValueByNumber(int number) {
              return OperatorStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.onnx4j.prototypes.OnnxOperatorsProto3.getDescriptor().getEnumTypes().get(0);
    }

    private static final OperatorStatus[] VALUES = values();

    public static OperatorStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OperatorStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:onnx.OperatorStatus)
  }

  public interface FunctionProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:onnx.FunctionProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name of the function, similar usage of op_type in OperatorProto.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * The name of the function, similar usage of op_type in OperatorProto.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The first version of a function set which contains this function.
     * When there's any breaking change for this function, the function set
     * contains the function needs to bump its version, and since_version of
     * the updated function will be changed to the updated function set version.  
     * </pre>
     *
     * <code>int64 since_version = 2;</code>
     */
    long getSinceVersion();

    /**
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this function is in an experimental or stable stage. Once an
     * function is published as STABLE, its syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When a function is published as EXPERIMENTAL, the syntax and semantics
     * of the function MAY change across operator set versions.
     * Functions "become" stable by deprecating the experimental version and
     * introducing a new stable function with the same name.
     * </pre>
     *
     * <code>.onnx.OperatorStatus status = 3;</code>
     */
    int getStatusValue();
    /**
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this function is in an experimental or stable stage. Once an
     * function is published as STABLE, its syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When a function is published as EXPERIMENTAL, the syntax and semantics
     * of the function MAY change across operator set versions.
     * Functions "become" stable by deprecating the experimental version and
     * introducing a new stable function with the same name.
     * </pre>
     *
     * <code>.onnx.OperatorStatus status = 3;</code>
     */
    org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus getStatus();

    /**
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     *
     * <code>repeated string input = 4;</code>
     */
    java.util.List<java.lang.String>
        getInputList();
    /**
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     *
     * <code>repeated string input = 4;</code>
     */
    int getInputCount();
    /**
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     *
     * <code>repeated string input = 4;</code>
     */
    java.lang.String getInput(int index);
    /**
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     *
     * <code>repeated string input = 4;</code>
     */
    com.google.protobuf.ByteString
        getInputBytes(int index);

    /**
     * <code>repeated string output = 5;</code>
     */
    java.util.List<java.lang.String>
        getOutputList();
    /**
     * <code>repeated string output = 5;</code>
     */
    int getOutputCount();
    /**
     * <code>repeated string output = 5;</code>
     */
    java.lang.String getOutput(int index);
    /**
     * <code>repeated string output = 5;</code>
     */
    com.google.protobuf.ByteString
        getOutputBytes(int index);

    /**
     * <pre>
     * The attributes of the function.
     * </pre>
     *
     * <code>repeated string attribute = 6;</code>
     */
    java.util.List<java.lang.String>
        getAttributeList();
    /**
     * <pre>
     * The attributes of the function.
     * </pre>
     *
     * <code>repeated string attribute = 6;</code>
     */
    int getAttributeCount();
    /**
     * <pre>
     * The attributes of the function.
     * </pre>
     *
     * <code>repeated string attribute = 6;</code>
     */
    java.lang.String getAttribute(int index);
    /**
     * <pre>
     * The attributes of the function.
     * </pre>
     *
     * <code>repeated string attribute = 6;</code>
     */
    com.google.protobuf.ByteString
        getAttributeBytes(int index);

    /**
     * <pre>
     * The nodes in the function.
     * </pre>
     *
     * <code>repeated .onnx.NodeProto node = 7;</code>
     */
    java.util.List<org.onnx4j.prototypes.OnnxProto3.NodeProto> 
        getNodeList();
    /**
     * <pre>
     * The nodes in the function.
     * </pre>
     *
     * <code>repeated .onnx.NodeProto node = 7;</code>
     */
    org.onnx4j.prototypes.OnnxProto3.NodeProto getNode(int index);
    /**
     * <pre>
     * The nodes in the function.
     * </pre>
     *
     * <code>repeated .onnx.NodeProto node = 7;</code>
     */
    int getNodeCount();
    /**
     * <pre>
     * The nodes in the function.
     * </pre>
     *
     * <code>repeated .onnx.NodeProto node = 7;</code>
     */
    java.util.List<? extends org.onnx4j.prototypes.OnnxProto3.NodeProtoOrBuilder> 
        getNodeOrBuilderList();
    /**
     * <pre>
     * The nodes in the function.
     * </pre>
     *
     * <code>repeated .onnx.NodeProto node = 7;</code>
     */
    org.onnx4j.prototypes.OnnxProto3.NodeProtoOrBuilder getNodeOrBuilder(
        int index);

    /**
     * <pre>
     * A human-readable documentation for this function. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 8;</code>
     */
    java.lang.String getDocString();
    /**
     * <pre>
     * A human-readable documentation for this function. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 8;</code>
     */
    com.google.protobuf.ByteString
        getDocStringBytes();
  }
  /**
   * Protobuf type {@code onnx.FunctionProto}
   */
  public  static final class FunctionProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:onnx.FunctionProto)
      FunctionProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FunctionProto.newBuilder() to construct.
    private FunctionProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FunctionProto() {
      name_ = "";
      status_ = 0;
      input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      output_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      attribute_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      node_ = java.util.Collections.emptyList();
      docString_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FunctionProto();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FunctionProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 16: {

              sinceVersion_ = input.readInt64();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              status_ = rawValue;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                input_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              input_.add(s);
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                output_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              output_.add(s);
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                attribute_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              attribute_.add(s);
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                node_ = new java.util.ArrayList<org.onnx4j.prototypes.OnnxProto3.NodeProto>();
                mutable_bitField0_ |= 0x00000008;
              }
              node_.add(
                  input.readMessage(org.onnx4j.prototypes.OnnxProto3.NodeProto.parser(), extensionRegistry));
              break;
            }
            case 66: {
              java.lang.String s = input.readStringRequireUtf8();

              docString_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          input_ = input_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          output_ = output_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          attribute_ = attribute_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          node_ = java.util.Collections.unmodifiableList(node_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_FunctionProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_FunctionProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.class, org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * The name of the function, similar usage of op_type in OperatorProto.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the function, similar usage of op_type in OperatorProto.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SINCE_VERSION_FIELD_NUMBER = 2;
    private long sinceVersion_;
    /**
     * <pre>
     * The first version of a function set which contains this function.
     * When there's any breaking change for this function, the function set
     * contains the function needs to bump its version, and since_version of
     * the updated function will be changed to the updated function set version.  
     * </pre>
     *
     * <code>int64 since_version = 2;</code>
     */
    public long getSinceVersion() {
      return sinceVersion_;
    }

    public static final int STATUS_FIELD_NUMBER = 3;
    private int status_;
    /**
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this function is in an experimental or stable stage. Once an
     * function is published as STABLE, its syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When a function is published as EXPERIMENTAL, the syntax and semantics
     * of the function MAY change across operator set versions.
     * Functions "become" stable by deprecating the experimental version and
     * introducing a new stable function with the same name.
     * </pre>
     *
     * <code>.onnx.OperatorStatus status = 3;</code>
     */
    public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this function is in an experimental or stable stage. Once an
     * function is published as STABLE, its syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When a function is published as EXPERIMENTAL, the syntax and semantics
     * of the function MAY change across operator set versions.
     * Functions "become" stable by deprecating the experimental version and
     * introducing a new stable function with the same name.
     * </pre>
     *
     * <code>.onnx.OperatorStatus status = 3;</code>
     */
    public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus getStatus() {
      @SuppressWarnings("deprecation")
      org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus result = org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus.valueOf(status_);
      return result == null ? org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus.UNRECOGNIZED : result;
    }

    public static final int INPUT_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList input_;
    /**
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     *
     * <code>repeated string input = 4;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getInputList() {
      return input_;
    }
    /**
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     *
     * <code>repeated string input = 4;</code>
     */
    public int getInputCount() {
      return input_.size();
    }
    /**
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     *
     * <code>repeated string input = 4;</code>
     */
    public java.lang.String getInput(int index) {
      return input_.get(index);
    }
    /**
     * <pre>
     * The inputs and outputs of the function.
     * </pre>
     *
     * <code>repeated string input = 4;</code>
     */
    public com.google.protobuf.ByteString
        getInputBytes(int index) {
      return input_.getByteString(index);
    }

    public static final int OUTPUT_FIELD_NUMBER = 5;
    private com.google.protobuf.LazyStringList output_;
    /**
     * <code>repeated string output = 5;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getOutputList() {
      return output_;
    }
    /**
     * <code>repeated string output = 5;</code>
     */
    public int getOutputCount() {
      return output_.size();
    }
    /**
     * <code>repeated string output = 5;</code>
     */
    public java.lang.String getOutput(int index) {
      return output_.get(index);
    }
    /**
     * <code>repeated string output = 5;</code>
     */
    public com.google.protobuf.ByteString
        getOutputBytes(int index) {
      return output_.getByteString(index);
    }

    public static final int ATTRIBUTE_FIELD_NUMBER = 6;
    private com.google.protobuf.LazyStringList attribute_;
    /**
     * <pre>
     * The attributes of the function.
     * </pre>
     *
     * <code>repeated string attribute = 6;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getAttributeList() {
      return attribute_;
    }
    /**
     * <pre>
     * The attributes of the function.
     * </pre>
     *
     * <code>repeated string attribute = 6;</code>
     */
    public int getAttributeCount() {
      return attribute_.size();
    }
    /**
     * <pre>
     * The attributes of the function.
     * </pre>
     *
     * <code>repeated string attribute = 6;</code>
     */
    public java.lang.String getAttribute(int index) {
      return attribute_.get(index);
    }
    /**
     * <pre>
     * The attributes of the function.
     * </pre>
     *
     * <code>repeated string attribute = 6;</code>
     */
    public com.google.protobuf.ByteString
        getAttributeBytes(int index) {
      return attribute_.getByteString(index);
    }

    public static final int NODE_FIELD_NUMBER = 7;
    private java.util.List<org.onnx4j.prototypes.OnnxProto3.NodeProto> node_;
    /**
     * <pre>
     * The nodes in the function.
     * </pre>
     *
     * <code>repeated .onnx.NodeProto node = 7;</code>
     */
    public java.util.List<org.onnx4j.prototypes.OnnxProto3.NodeProto> getNodeList() {
      return node_;
    }
    /**
     * <pre>
     * The nodes in the function.
     * </pre>
     *
     * <code>repeated .onnx.NodeProto node = 7;</code>
     */
    public java.util.List<? extends org.onnx4j.prototypes.OnnxProto3.NodeProtoOrBuilder> 
        getNodeOrBuilderList() {
      return node_;
    }
    /**
     * <pre>
     * The nodes in the function.
     * </pre>
     *
     * <code>repeated .onnx.NodeProto node = 7;</code>
     */
    public int getNodeCount() {
      return node_.size();
    }
    /**
     * <pre>
     * The nodes in the function.
     * </pre>
     *
     * <code>repeated .onnx.NodeProto node = 7;</code>
     */
    public org.onnx4j.prototypes.OnnxProto3.NodeProto getNode(int index) {
      return node_.get(index);
    }
    /**
     * <pre>
     * The nodes in the function.
     * </pre>
     *
     * <code>repeated .onnx.NodeProto node = 7;</code>
     */
    public org.onnx4j.prototypes.OnnxProto3.NodeProtoOrBuilder getNodeOrBuilder(
        int index) {
      return node_.get(index);
    }

    public static final int DOC_STRING_FIELD_NUMBER = 8;
    private volatile java.lang.Object docString_;
    /**
     * <pre>
     * A human-readable documentation for this function. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 8;</code>
     */
    public java.lang.String getDocString() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        docString_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A human-readable documentation for this function. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 8;</code>
     */
    public com.google.protobuf.ByteString
        getDocStringBytes() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        docString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (sinceVersion_ != 0L) {
        output.writeInt64(2, sinceVersion_);
      }
      if (status_ != org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus.EXPERIMENTAL.getNumber()) {
        output.writeEnum(3, status_);
      }
      for (int i = 0; i < input_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, input_.getRaw(i));
      }
      for (int i = 0; i < output_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, output_.getRaw(i));
      }
      for (int i = 0; i < attribute_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, attribute_.getRaw(i));
      }
      for (int i = 0; i < node_.size(); i++) {
        output.writeMessage(7, node_.get(i));
      }
      if (!getDocStringBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, docString_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (sinceVersion_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, sinceVersion_);
      }
      if (status_ != org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus.EXPERIMENTAL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, status_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < input_.size(); i++) {
          dataSize += computeStringSizeNoTag(input_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getInputList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < output_.size(); i++) {
          dataSize += computeStringSizeNoTag(output_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getOutputList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < attribute_.size(); i++) {
          dataSize += computeStringSizeNoTag(attribute_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getAttributeList().size();
      }
      for (int i = 0; i < node_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, node_.get(i));
      }
      if (!getDocStringBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, docString_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto)) {
        return super.equals(obj);
      }
      org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto other = (org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (getSinceVersion()
          != other.getSinceVersion()) return false;
      if (status_ != other.status_) return false;
      if (!getInputList()
          .equals(other.getInputList())) return false;
      if (!getOutputList()
          .equals(other.getOutputList())) return false;
      if (!getAttributeList()
          .equals(other.getAttributeList())) return false;
      if (!getNodeList()
          .equals(other.getNodeList())) return false;
      if (!getDocString()
          .equals(other.getDocString())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + SINCE_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSinceVersion());
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + status_;
      if (getInputCount() > 0) {
        hash = (37 * hash) + INPUT_FIELD_NUMBER;
        hash = (53 * hash) + getInputList().hashCode();
      }
      if (getOutputCount() > 0) {
        hash = (37 * hash) + OUTPUT_FIELD_NUMBER;
        hash = (53 * hash) + getOutputList().hashCode();
      }
      if (getAttributeCount() > 0) {
        hash = (37 * hash) + ATTRIBUTE_FIELD_NUMBER;
        hash = (53 * hash) + getAttributeList().hashCode();
      }
      if (getNodeCount() > 0) {
        hash = (37 * hash) + NODE_FIELD_NUMBER;
        hash = (53 * hash) + getNodeList().hashCode();
      }
      hash = (37 * hash) + DOC_STRING_FIELD_NUMBER;
      hash = (53 * hash) + getDocString().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code onnx.FunctionProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:onnx.FunctionProto)
        org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_FunctionProto_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_FunctionProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.class, org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.Builder.class);
      }

      // Construct using onnx.OnnxOperatorsProto3.FunctionProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getNodeFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        name_ = "";

        sinceVersion_ = 0L;

        status_ = 0;

        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        output_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        attribute_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (nodeBuilder_ == null) {
          node_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          nodeBuilder_.clear();
        }
        docString_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_FunctionProto_descriptor;
      }

      @java.lang.Override
      public org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto getDefaultInstanceForType() {
        return org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.getDefaultInstance();
      }

      @java.lang.Override
      public org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto build() {
        org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto buildPartial() {
        org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto result = new org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto(this);
        int from_bitField0_ = bitField0_;
        result.name_ = name_;
        result.sinceVersion_ = sinceVersion_;
        result.status_ = status_;
        if (((bitField0_ & 0x00000001) != 0)) {
          input_ = input_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.input_ = input_;
        if (((bitField0_ & 0x00000002) != 0)) {
          output_ = output_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.output_ = output_;
        if (((bitField0_ & 0x00000004) != 0)) {
          attribute_ = attribute_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.attribute_ = attribute_;
        if (nodeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            node_ = java.util.Collections.unmodifiableList(node_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.node_ = node_;
        } else {
          result.node_ = nodeBuilder_.build();
        }
        result.docString_ = docString_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto) {
          return mergeFrom((org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto other) {
        if (other == org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.getSinceVersion() != 0L) {
          setSinceVersion(other.getSinceVersion());
        }
        if (other.status_ != 0) {
          setStatusValue(other.getStatusValue());
        }
        if (!other.input_.isEmpty()) {
          if (input_.isEmpty()) {
            input_ = other.input_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureInputIsMutable();
            input_.addAll(other.input_);
          }
          onChanged();
        }
        if (!other.output_.isEmpty()) {
          if (output_.isEmpty()) {
            output_ = other.output_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureOutputIsMutable();
            output_.addAll(other.output_);
          }
          onChanged();
        }
        if (!other.attribute_.isEmpty()) {
          if (attribute_.isEmpty()) {
            attribute_ = other.attribute_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureAttributeIsMutable();
            attribute_.addAll(other.attribute_);
          }
          onChanged();
        }
        if (nodeBuilder_ == null) {
          if (!other.node_.isEmpty()) {
            if (node_.isEmpty()) {
              node_ = other.node_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureNodeIsMutable();
              node_.addAll(other.node_);
            }
            onChanged();
          }
        } else {
          if (!other.node_.isEmpty()) {
            if (nodeBuilder_.isEmpty()) {
              nodeBuilder_.dispose();
              nodeBuilder_ = null;
              node_ = other.node_;
              bitField0_ = (bitField0_ & ~0x00000008);
              nodeBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getNodeFieldBuilder() : null;
            } else {
              nodeBuilder_.addAllMessages(other.node_);
            }
          }
        }
        if (!other.getDocString().isEmpty()) {
          docString_ = other.docString_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The name of the function, similar usage of op_type in OperatorProto.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the function, similar usage of op_type in OperatorProto.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the function, similar usage of op_type in OperatorProto.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the function, similar usage of op_type in OperatorProto.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the function, similar usage of op_type in OperatorProto.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private long sinceVersion_ ;
      /**
       * <pre>
       * The first version of a function set which contains this function.
       * When there's any breaking change for this function, the function set
       * contains the function needs to bump its version, and since_version of
       * the updated function will be changed to the updated function set version.  
       * </pre>
       *
       * <code>int64 since_version = 2;</code>
       */
      public long getSinceVersion() {
        return sinceVersion_;
      }
      /**
       * <pre>
       * The first version of a function set which contains this function.
       * When there's any breaking change for this function, the function set
       * contains the function needs to bump its version, and since_version of
       * the updated function will be changed to the updated function set version.  
       * </pre>
       *
       * <code>int64 since_version = 2;</code>
       */
      public Builder setSinceVersion(long value) {
        
        sinceVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The first version of a function set which contains this function.
       * When there's any breaking change for this function, the function set
       * contains the function needs to bump its version, and since_version of
       * the updated function will be changed to the updated function set version.  
       * </pre>
       *
       * <code>int64 since_version = 2;</code>
       */
      public Builder clearSinceVersion() {
        
        sinceVersion_ = 0L;
        onChanged();
        return this;
      }

      private int status_ = 0;
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this function is in an experimental or stable stage. Once an
       * function is published as STABLE, its syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When a function is published as EXPERIMENTAL, the syntax and semantics
       * of the function MAY change across operator set versions.
       * Functions "become" stable by deprecating the experimental version and
       * introducing a new stable function with the same name.
       * </pre>
       *
       * <code>.onnx.OperatorStatus status = 3;</code>
       */
      public int getStatusValue() {
        return status_;
      }
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this function is in an experimental or stable stage. Once an
       * function is published as STABLE, its syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When a function is published as EXPERIMENTAL, the syntax and semantics
       * of the function MAY change across operator set versions.
       * Functions "become" stable by deprecating the experimental version and
       * introducing a new stable function with the same name.
       * </pre>
       *
       * <code>.onnx.OperatorStatus status = 3;</code>
       */
      public Builder setStatusValue(int value) {
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this function is in an experimental or stable stage. Once an
       * function is published as STABLE, its syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When a function is published as EXPERIMENTAL, the syntax and semantics
       * of the function MAY change across operator set versions.
       * Functions "become" stable by deprecating the experimental version and
       * introducing a new stable function with the same name.
       * </pre>
       *
       * <code>.onnx.OperatorStatus status = 3;</code>
       */
      public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus getStatus() {
        @SuppressWarnings("deprecation")
        org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus result = org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus.valueOf(status_);
        return result == null ? org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this function is in an experimental or stable stage. Once an
       * function is published as STABLE, its syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When a function is published as EXPERIMENTAL, the syntax and semantics
       * of the function MAY change across operator set versions.
       * Functions "become" stable by deprecating the experimental version and
       * introducing a new stable function with the same name.
       * </pre>
       *
       * <code>.onnx.OperatorStatus status = 3;</code>
       */
      public Builder setStatus(org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        status_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this function is in an experimental or stable stage. Once an
       * function is published as STABLE, its syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When a function is published as EXPERIMENTAL, the syntax and semantics
       * of the function MAY change across operator set versions.
       * Functions "become" stable by deprecating the experimental version and
       * introducing a new stable function with the same name.
       * </pre>
       *
       * <code>.onnx.OperatorStatus status = 3;</code>
       */
      public Builder clearStatus() {
        
        status_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureInputIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          input_ = new com.google.protobuf.LazyStringArrayList(input_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       *
       * <code>repeated string input = 4;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getInputList() {
        return input_.getUnmodifiableView();
      }
      /**
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       *
       * <code>repeated string input = 4;</code>
       */
      public int getInputCount() {
        return input_.size();
      }
      /**
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       *
       * <code>repeated string input = 4;</code>
       */
      public java.lang.String getInput(int index) {
        return input_.get(index);
      }
      /**
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       *
       * <code>repeated string input = 4;</code>
       */
      public com.google.protobuf.ByteString
          getInputBytes(int index) {
        return input_.getByteString(index);
      }
      /**
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       *
       * <code>repeated string input = 4;</code>
       */
      public Builder setInput(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       *
       * <code>repeated string input = 4;</code>
       */
      public Builder addInput(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       *
       * <code>repeated string input = 4;</code>
       */
      public Builder addAllInput(
          java.lang.Iterable<java.lang.String> values) {
        ensureInputIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, input_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       *
       * <code>repeated string input = 4;</code>
       */
      public Builder clearInput() {
        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The inputs and outputs of the function.
       * </pre>
       *
       * <code>repeated string input = 4;</code>
       */
      public Builder addInputBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList output_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureOutputIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          output_ = new com.google.protobuf.LazyStringArrayList(output_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getOutputList() {
        return output_.getUnmodifiableView();
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public int getOutputCount() {
        return output_.size();
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public java.lang.String getOutput(int index) {
        return output_.get(index);
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public com.google.protobuf.ByteString
          getOutputBytes(int index) {
        return output_.getByteString(index);
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public Builder setOutput(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOutputIsMutable();
        output_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public Builder addOutput(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureOutputIsMutable();
        output_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public Builder addAllOutput(
          java.lang.Iterable<java.lang.String> values) {
        ensureOutputIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, output_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public Builder clearOutput() {
        output_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string output = 5;</code>
       */
      public Builder addOutputBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureOutputIsMutable();
        output_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList attribute_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureAttributeIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          attribute_ = new com.google.protobuf.LazyStringArrayList(attribute_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * The attributes of the function.
       * </pre>
       *
       * <code>repeated string attribute = 6;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getAttributeList() {
        return attribute_.getUnmodifiableView();
      }
      /**
       * <pre>
       * The attributes of the function.
       * </pre>
       *
       * <code>repeated string attribute = 6;</code>
       */
      public int getAttributeCount() {
        return attribute_.size();
      }
      /**
       * <pre>
       * The attributes of the function.
       * </pre>
       *
       * <code>repeated string attribute = 6;</code>
       */
      public java.lang.String getAttribute(int index) {
        return attribute_.get(index);
      }
      /**
       * <pre>
       * The attributes of the function.
       * </pre>
       *
       * <code>repeated string attribute = 6;</code>
       */
      public com.google.protobuf.ByteString
          getAttributeBytes(int index) {
        return attribute_.getByteString(index);
      }
      /**
       * <pre>
       * The attributes of the function.
       * </pre>
       *
       * <code>repeated string attribute = 6;</code>
       */
      public Builder setAttribute(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureAttributeIsMutable();
        attribute_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The attributes of the function.
       * </pre>
       *
       * <code>repeated string attribute = 6;</code>
       */
      public Builder addAttribute(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureAttributeIsMutable();
        attribute_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The attributes of the function.
       * </pre>
       *
       * <code>repeated string attribute = 6;</code>
       */
      public Builder addAllAttribute(
          java.lang.Iterable<java.lang.String> values) {
        ensureAttributeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, attribute_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The attributes of the function.
       * </pre>
       *
       * <code>repeated string attribute = 6;</code>
       */
      public Builder clearAttribute() {
        attribute_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The attributes of the function.
       * </pre>
       *
       * <code>repeated string attribute = 6;</code>
       */
      public Builder addAttributeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureAttributeIsMutable();
        attribute_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<org.onnx4j.prototypes.OnnxProto3.NodeProto> node_ =
        java.util.Collections.emptyList();
      private void ensureNodeIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          node_ = new java.util.ArrayList<org.onnx4j.prototypes.OnnxProto3.NodeProto>(node_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.onnx4j.prototypes.OnnxProto3.NodeProto, org.onnx4j.prototypes.OnnxProto3.NodeProto.Builder, org.onnx4j.prototypes.OnnxProto3.NodeProtoOrBuilder> nodeBuilder_;

      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public java.util.List<org.onnx4j.prototypes.OnnxProto3.NodeProto> getNodeList() {
        if (nodeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(node_);
        } else {
          return nodeBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public int getNodeCount() {
        if (nodeBuilder_ == null) {
          return node_.size();
        } else {
          return nodeBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public org.onnx4j.prototypes.OnnxProto3.NodeProto getNode(int index) {
        if (nodeBuilder_ == null) {
          return node_.get(index);
        } else {
          return nodeBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public Builder setNode(
          int index, org.onnx4j.prototypes.OnnxProto3.NodeProto value) {
        if (nodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodeIsMutable();
          node_.set(index, value);
          onChanged();
        } else {
          nodeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public Builder setNode(
          int index, org.onnx4j.prototypes.OnnxProto3.NodeProto.Builder builderForValue) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.set(index, builderForValue.build());
          onChanged();
        } else {
          nodeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public Builder addNode(org.onnx4j.prototypes.OnnxProto3.NodeProto value) {
        if (nodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodeIsMutable();
          node_.add(value);
          onChanged();
        } else {
          nodeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public Builder addNode(
          int index, org.onnx4j.prototypes.OnnxProto3.NodeProto value) {
        if (nodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodeIsMutable();
          node_.add(index, value);
          onChanged();
        } else {
          nodeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public Builder addNode(
          org.onnx4j.prototypes.OnnxProto3.NodeProto.Builder builderForValue) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.add(builderForValue.build());
          onChanged();
        } else {
          nodeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public Builder addNode(
          int index, org.onnx4j.prototypes.OnnxProto3.NodeProto.Builder builderForValue) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.add(index, builderForValue.build());
          onChanged();
        } else {
          nodeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public Builder addAllNode(
          java.lang.Iterable<? extends org.onnx4j.prototypes.OnnxProto3.NodeProto> values) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, node_);
          onChanged();
        } else {
          nodeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public Builder clearNode() {
        if (nodeBuilder_ == null) {
          node_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          nodeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public Builder removeNode(int index) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.remove(index);
          onChanged();
        } else {
          nodeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public org.onnx4j.prototypes.OnnxProto3.NodeProto.Builder getNodeBuilder(
          int index) {
        return getNodeFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public org.onnx4j.prototypes.OnnxProto3.NodeProtoOrBuilder getNodeOrBuilder(
          int index) {
        if (nodeBuilder_ == null) {
          return node_.get(index);  } else {
          return nodeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public java.util.List<? extends org.onnx4j.prototypes.OnnxProto3.NodeProtoOrBuilder> 
           getNodeOrBuilderList() {
        if (nodeBuilder_ != null) {
          return nodeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(node_);
        }
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public org.onnx4j.prototypes.OnnxProto3.NodeProto.Builder addNodeBuilder() {
        return getNodeFieldBuilder().addBuilder(
            org.onnx4j.prototypes.OnnxProto3.NodeProto.getDefaultInstance());
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public org.onnx4j.prototypes.OnnxProto3.NodeProto.Builder addNodeBuilder(
          int index) {
        return getNodeFieldBuilder().addBuilder(
            index, org.onnx4j.prototypes.OnnxProto3.NodeProto.getDefaultInstance());
      }
      /**
       * <pre>
       * The nodes in the function.
       * </pre>
       *
       * <code>repeated .onnx.NodeProto node = 7;</code>
       */
      public java.util.List<org.onnx4j.prototypes.OnnxProto3.NodeProto.Builder> 
           getNodeBuilderList() {
        return getNodeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.onnx4j.prototypes.OnnxProto3.NodeProto, org.onnx4j.prototypes.OnnxProto3.NodeProto.Builder, org.onnx4j.prototypes.OnnxProto3.NodeProtoOrBuilder> 
          getNodeFieldBuilder() {
        if (nodeBuilder_ == null) {
          nodeBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.onnx4j.prototypes.OnnxProto3.NodeProto, org.onnx4j.prototypes.OnnxProto3.NodeProto.Builder, org.onnx4j.prototypes.OnnxProto3.NodeProtoOrBuilder>(
                  node_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          node_ = null;
        }
        return nodeBuilder_;
      }

      private java.lang.Object docString_ = "";
      /**
       * <pre>
       * A human-readable documentation for this function. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 8;</code>
       */
      public java.lang.String getDocString() {
        java.lang.Object ref = docString_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          docString_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A human-readable documentation for this function. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 8;</code>
       */
      public com.google.protobuf.ByteString
          getDocStringBytes() {
        java.lang.Object ref = docString_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          docString_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A human-readable documentation for this function. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 8;</code>
       */
      public Builder setDocString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        docString_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A human-readable documentation for this function. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 8;</code>
       */
      public Builder clearDocString() {
        
        docString_ = getDefaultInstance().getDocString();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A human-readable documentation for this function. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 8;</code>
       */
      public Builder setDocStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        docString_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:onnx.FunctionProto)
    }

    // @@protoc_insertion_point(class_scope:onnx.FunctionProto)
    private static final org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto();
    }

    public static org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FunctionProto>
        PARSER = new com.google.protobuf.AbstractParser<FunctionProto>() {
      @java.lang.Override
      public FunctionProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FunctionProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FunctionProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FunctionProto> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OperatorProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:onnx.OperatorProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     *
     * <code>string op_type = 1;</code>
     */
    java.lang.String getOpType();
    /**
     * <pre>
     * The name of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     *
     * <code>string op_type = 1;</code>
     */
    com.google.protobuf.ByteString
        getOpTypeBytes();

    /**
     * <pre>
     * The version of the operator set that first introduced this
     * operator. This value MUST be the same value as the
     * opset_version of the operator set that first published this operator.
     * Subsequent versions of the operator set MUST NOT alter the signature
     * or semantics of the operator once published as STABLE.
     * This field MUST be present in this version of the IR.
     * </pre>
     *
     * <code>int64 since_version = 2;</code>
     */
    long getSinceVersion();

    /**
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this operator is in an experimental or stable stage. Once an
     * operator is published as STABLE, it's syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When an operator is published as EXPERIMENTAL, the syntax and semantics
     * of the operator MAY change across operator set versions.
     * Operators "become" stable by deprecating the experimental version and
     * introducing a new stable operator with the same op_type.
     * </pre>
     *
     * <code>.onnx.OperatorStatus status = 3;</code>
     */
    int getStatusValue();
    /**
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this operator is in an experimental or stable stage. Once an
     * operator is published as STABLE, it's syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When an operator is published as EXPERIMENTAL, the syntax and semantics
     * of the operator MAY change across operator set versions.
     * Operators "become" stable by deprecating the experimental version and
     * introducing a new stable operator with the same op_type.
     * </pre>
     *
     * <code>.onnx.OperatorStatus status = 3;</code>
     */
    org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus getStatus();

    /**
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 10;</code>
     */
    java.lang.String getDocString();
    /**
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 10;</code>
     */
    com.google.protobuf.ByteString
        getDocStringBytes();
  }
  /**
   * <pre>
   * An OperatorProto represents the immutable specification of the signature
   * and semantics of an operator.
   * Operators are declared as part of an OperatorSet, which also defines the
   * domain name for the set.
   * Operators are uniquely identified by a three part identifier
   *   (domain, op_type, since_version)
   * where
   *   *domain* is the domain of an operator set that
   *      contains this operator specification.
   *   *op_type* is the name of the operator as referenced by a
   *      NodeProto.op_type
   *   *since_version* is the version of the operator set that
   *      this operator was initially declared in.
   * </pre>
   *
   * Protobuf type {@code onnx.OperatorProto}
   */
  public  static final class OperatorProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:onnx.OperatorProto)
      OperatorProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OperatorProto.newBuilder() to construct.
    private OperatorProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OperatorProto() {
      opType_ = "";
      status_ = 0;
      docString_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new OperatorProto();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private OperatorProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              opType_ = s;
              break;
            }
            case 16: {

              sinceVersion_ = input.readInt64();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              status_ = rawValue;
              break;
            }
            case 82: {
              java.lang.String s = input.readStringRequireUtf8();

              docString_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_OperatorProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_OperatorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.class, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.Builder.class);
    }

    public static final int OP_TYPE_FIELD_NUMBER = 1;
    private volatile java.lang.Object opType_;
    /**
     * <pre>
     * The name of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     *
     * <code>string op_type = 1;</code>
     */
    public java.lang.String getOpType() {
      java.lang.Object ref = opType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        opType_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the operator within a domain.
     * This field MUST be present in this version of the IR.
     * </pre>
     *
     * <code>string op_type = 1;</code>
     */
    public com.google.protobuf.ByteString
        getOpTypeBytes() {
      java.lang.Object ref = opType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        opType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SINCE_VERSION_FIELD_NUMBER = 2;
    private long sinceVersion_;
    /**
     * <pre>
     * The version of the operator set that first introduced this
     * operator. This value MUST be the same value as the
     * opset_version of the operator set that first published this operator.
     * Subsequent versions of the operator set MUST NOT alter the signature
     * or semantics of the operator once published as STABLE.
     * This field MUST be present in this version of the IR.
     * </pre>
     *
     * <code>int64 since_version = 2;</code>
     */
    public long getSinceVersion() {
      return sinceVersion_;
    }

    public static final int STATUS_FIELD_NUMBER = 3;
    private int status_;
    /**
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this operator is in an experimental or stable stage. Once an
     * operator is published as STABLE, it's syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When an operator is published as EXPERIMENTAL, the syntax and semantics
     * of the operator MAY change across operator set versions.
     * Operators "become" stable by deprecating the experimental version and
     * introducing a new stable operator with the same op_type.
     * </pre>
     *
     * <code>.onnx.OperatorStatus status = 3;</code>
     */
    public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * This field indicates whether the syntax, semantics, or presence
     * of this operator is in an experimental or stable stage. Once an
     * operator is published as STABLE, it's syntax and semantics MUST NOT
     * change in subsequent versions of the operator set.
     * When an operator is published as EXPERIMENTAL, the syntax and semantics
     * of the operator MAY change across operator set versions.
     * Operators "become" stable by deprecating the experimental version and
     * introducing a new stable operator with the same op_type.
     * </pre>
     *
     * <code>.onnx.OperatorStatus status = 3;</code>
     */
    public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus getStatus() {
      @SuppressWarnings("deprecation")
      org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus result = org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus.valueOf(status_);
      return result == null ? org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus.UNRECOGNIZED : result;
    }

    public static final int DOC_STRING_FIELD_NUMBER = 10;
    private volatile java.lang.Object docString_;
    /**
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 10;</code>
     */
    public java.lang.String getDocString() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        docString_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A human-readable documentation for this operator. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 10;</code>
     */
    public com.google.protobuf.ByteString
        getDocStringBytes() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        docString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getOpTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, opType_);
      }
      if (sinceVersion_ != 0L) {
        output.writeInt64(2, sinceVersion_);
      }
      if (status_ != org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus.EXPERIMENTAL.getNumber()) {
        output.writeEnum(3, status_);
      }
      if (!getDocStringBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 10, docString_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getOpTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, opType_);
      }
      if (sinceVersion_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, sinceVersion_);
      }
      if (status_ != org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus.EXPERIMENTAL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, status_);
      }
      if (!getDocStringBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, docString_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto)) {
        return super.equals(obj);
      }
      org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto other = (org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto) obj;

      if (!getOpType()
          .equals(other.getOpType())) return false;
      if (getSinceVersion()
          != other.getSinceVersion()) return false;
      if (status_ != other.status_) return false;
      if (!getDocString()
          .equals(other.getDocString())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + OP_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getOpType().hashCode();
      hash = (37 * hash) + SINCE_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSinceVersion());
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + status_;
      hash = (37 * hash) + DOC_STRING_FIELD_NUMBER;
      hash = (53 * hash) + getDocString().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An OperatorProto represents the immutable specification of the signature
     * and semantics of an operator.
     * Operators are declared as part of an OperatorSet, which also defines the
     * domain name for the set.
     * Operators are uniquely identified by a three part identifier
     *   (domain, op_type, since_version)
     * where
     *   *domain* is the domain of an operator set that
     *      contains this operator specification.
     *   *op_type* is the name of the operator as referenced by a
     *      NodeProto.op_type
     *   *since_version* is the version of the operator set that
     *      this operator was initially declared in.
     * </pre>
     *
     * Protobuf type {@code onnx.OperatorProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:onnx.OperatorProto)
        org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_OperatorProto_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_OperatorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.class, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.Builder.class);
      }

      // Construct using onnx.OnnxOperatorsProto3.OperatorProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        opType_ = "";

        sinceVersion_ = 0L;

        status_ = 0;

        docString_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_OperatorProto_descriptor;
      }

      @java.lang.Override
      public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto getDefaultInstanceForType() {
        return org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.getDefaultInstance();
      }

      @java.lang.Override
      public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto build() {
        org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto buildPartial() {
        org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto result = new org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto(this);
        result.opType_ = opType_;
        result.sinceVersion_ = sinceVersion_;
        result.status_ = status_;
        result.docString_ = docString_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto) {
          return mergeFrom((org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto other) {
        if (other == org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.getDefaultInstance()) return this;
        if (!other.getOpType().isEmpty()) {
          opType_ = other.opType_;
          onChanged();
        }
        if (other.getSinceVersion() != 0L) {
          setSinceVersion(other.getSinceVersion());
        }
        if (other.status_ != 0) {
          setStatusValue(other.getStatusValue());
        }
        if (!other.getDocString().isEmpty()) {
          docString_ = other.docString_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object opType_ = "";
      /**
       * <pre>
       * The name of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>string op_type = 1;</code>
       */
      public java.lang.String getOpType() {
        java.lang.Object ref = opType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          opType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>string op_type = 1;</code>
       */
      public com.google.protobuf.ByteString
          getOpTypeBytes() {
        java.lang.Object ref = opType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          opType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>string op_type = 1;</code>
       */
      public Builder setOpType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        opType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>string op_type = 1;</code>
       */
      public Builder clearOpType() {
        
        opType_ = getDefaultInstance().getOpType();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the operator within a domain.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>string op_type = 1;</code>
       */
      public Builder setOpTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        opType_ = value;
        onChanged();
        return this;
      }

      private long sinceVersion_ ;
      /**
       * <pre>
       * The version of the operator set that first introduced this
       * operator. This value MUST be the same value as the
       * opset_version of the operator set that first published this operator.
       * Subsequent versions of the operator set MUST NOT alter the signature
       * or semantics of the operator once published as STABLE.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>int64 since_version = 2;</code>
       */
      public long getSinceVersion() {
        return sinceVersion_;
      }
      /**
       * <pre>
       * The version of the operator set that first introduced this
       * operator. This value MUST be the same value as the
       * opset_version of the operator set that first published this operator.
       * Subsequent versions of the operator set MUST NOT alter the signature
       * or semantics of the operator once published as STABLE.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>int64 since_version = 2;</code>
       */
      public Builder setSinceVersion(long value) {
        
        sinceVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The version of the operator set that first introduced this
       * operator. This value MUST be the same value as the
       * opset_version of the operator set that first published this operator.
       * Subsequent versions of the operator set MUST NOT alter the signature
       * or semantics of the operator once published as STABLE.
       * This field MUST be present in this version of the IR.
       * </pre>
       *
       * <code>int64 since_version = 2;</code>
       */
      public Builder clearSinceVersion() {
        
        sinceVersion_ = 0L;
        onChanged();
        return this;
      }

      private int status_ = 0;
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       *
       * <code>.onnx.OperatorStatus status = 3;</code>
       */
      public int getStatusValue() {
        return status_;
      }
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       *
       * <code>.onnx.OperatorStatus status = 3;</code>
       */
      public Builder setStatusValue(int value) {
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       *
       * <code>.onnx.OperatorStatus status = 3;</code>
       */
      public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus getStatus() {
        @SuppressWarnings("deprecation")
        org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus result = org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus.valueOf(status_);
        return result == null ? org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       *
       * <code>.onnx.OperatorStatus status = 3;</code>
       */
      public Builder setStatus(org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        status_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field indicates whether the syntax, semantics, or presence
       * of this operator is in an experimental or stable stage. Once an
       * operator is published as STABLE, it's syntax and semantics MUST NOT
       * change in subsequent versions of the operator set.
       * When an operator is published as EXPERIMENTAL, the syntax and semantics
       * of the operator MAY change across operator set versions.
       * Operators "become" stable by deprecating the experimental version and
       * introducing a new stable operator with the same op_type.
       * </pre>
       *
       * <code>.onnx.OperatorStatus status = 3;</code>
       */
      public Builder clearStatus() {
        
        status_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object docString_ = "";
      /**
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 10;</code>
       */
      public java.lang.String getDocString() {
        java.lang.Object ref = docString_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          docString_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 10;</code>
       */
      public com.google.protobuf.ByteString
          getDocStringBytes() {
        java.lang.Object ref = docString_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          docString_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 10;</code>
       */
      public Builder setDocString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        docString_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 10;</code>
       */
      public Builder clearDocString() {
        
        docString_ = getDefaultInstance().getDocString();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A human-readable documentation for this operator. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 10;</code>
       */
      public Builder setDocStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        docString_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:onnx.OperatorProto)
    }

    // @@protoc_insertion_point(class_scope:onnx.OperatorProto)
    private static final org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto();
    }

    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OperatorProto>
        PARSER = new com.google.protobuf.AbstractParser<OperatorProto>() {
      @java.lang.Override
      public OperatorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OperatorProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<OperatorProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OperatorProto> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OperatorSetProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:onnx.OperatorSetProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     *
     * <code>string magic = 1;</code>
     */
    java.lang.String getMagic();
    /**
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     *
     * <code>string magic = 1;</code>
     */
    com.google.protobuf.ByteString
        getMagicBytes();

    /**
     * <pre>
     * All OperatorSetProtos indicate the version of the IR syntax and semantics
     * they adhere to. It is always IR_VERSION.
     * This field MUST be present in this version of the IR
     * </pre>
     *
     * <code>int64 ir_version = 2;</code>
     */
    long getIrVersion();

    /**
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_version_prerelease = 3;</code>
     */
    java.lang.String getIrVersionPrerelease();
    /**
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_version_prerelease = 3;</code>
     */
    com.google.protobuf.ByteString
        getIrVersionPrereleaseBytes();

    /**
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_build_metadata = 7;</code>
     */
    java.lang.String getIrBuildMetadata();
    /**
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_build_metadata = 7;</code>
     */
    com.google.protobuf.ByteString
        getIrBuildMetadataBytes();

    /**
     * <pre>
     * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     *
     * <code>string domain = 4;</code>
     */
    java.lang.String getDomain();
    /**
     * <pre>
     * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     *
     * <code>string domain = 4;</code>
     */
    com.google.protobuf.ByteString
        getDomainBytes();

    /**
     * <pre>
     * The version of the set of operators. This is a simple int value
     * that is monotonically increasing as new versions of operator set
     * are published. All operators in this set MUST have version
     * numbers no greater than opset_version.
     * </pre>
     *
     * <code>int64 opset_version = 5;</code>
     */
    long getOpsetVersion();

    /**
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 6;</code>
     */
    java.lang.String getDocString();
    /**
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 6;</code>
     */
    com.google.protobuf.ByteString
        getDocStringBytes();

    /**
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    java.util.List<org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto> 
        getOperatorList();
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto getOperator(int index);
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    int getOperatorCount();
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    java.util.List<? extends org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProtoOrBuilder> 
        getOperatorOrBuilderList();
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProtoOrBuilder getOperatorOrBuilder(
        int index);

    /**
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     *
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     */
    java.util.List<org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto> 
        getFunctionsList();
    /**
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     *
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     */
    org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto getFunctions(int index);
    /**
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     *
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     */
    int getFunctionsCount();
    /**
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     *
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     */
    java.util.List<? extends org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProtoOrBuilder> 
        getFunctionsOrBuilderList();
    /**
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     *
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     */
    org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProtoOrBuilder getFunctionsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * An OperatorSetProto represents an immutable set of immutable operator
   * specifications.
   * The domain of the set (OperatorSetProto.domain) is a reverse-DNS name
   * that disambiguates operator sets defined by independent entities.
   * The version of the set (opset_version) is a monotonically increasing
   * integer that indicates changes to the membership of the operator set.
   * Operator sets are uniquely identified by a two part identifier (domain, opset_version)
   * Like ModelProto, OperatorSetProto is intended as a top-level file/wire format,
   * and thus has the standard format headers in addition to the operator set information.
   * </pre>
   *
   * Protobuf type {@code onnx.OperatorSetProto}
   */
  public  static final class OperatorSetProto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:onnx.OperatorSetProto)
      OperatorSetProtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OperatorSetProto.newBuilder() to construct.
    private OperatorSetProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OperatorSetProto() {
      magic_ = "";
      irVersionPrerelease_ = "";
      irBuildMetadata_ = "";
      domain_ = "";
      docString_ = "";
      operator_ = java.util.Collections.emptyList();
      functions_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new OperatorSetProto();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private OperatorSetProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              magic_ = s;
              break;
            }
            case 16: {

              irVersion_ = input.readInt64();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              irVersionPrerelease_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              domain_ = s;
              break;
            }
            case 40: {

              opsetVersion_ = input.readInt64();
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              docString_ = s;
              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();

              irBuildMetadata_ = s;
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                operator_ = new java.util.ArrayList<org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto>();
                mutable_bitField0_ |= 0x00000001;
              }
              operator_.add(
                  input.readMessage(org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.parser(), extensionRegistry));
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                functions_ = new java.util.ArrayList<org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto>();
                mutable_bitField0_ |= 0x00000002;
              }
              functions_.add(
                  input.readMessage(org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          operator_ = java.util.Collections.unmodifiableList(operator_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          functions_ = java.util.Collections.unmodifiableList(functions_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_OperatorSetProto_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_OperatorSetProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto.class, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto.Builder.class);
    }

    public static final int MAGIC_FIELD_NUMBER = 1;
    private volatile java.lang.Object magic_;
    /**
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     *
     * <code>string magic = 1;</code>
     */
    public java.lang.String getMagic() {
      java.lang.Object ref = magic_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        magic_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
     * protobuf files containing OperatorSets from other content.
     * This field MUST be "ONNXOPSET"
     * This field MUST be present in this version of the IR
     * </pre>
     *
     * <code>string magic = 1;</code>
     */
    public com.google.protobuf.ByteString
        getMagicBytes() {
      java.lang.Object ref = magic_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        magic_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IR_VERSION_FIELD_NUMBER = 2;
    private long irVersion_;
    /**
     * <pre>
     * All OperatorSetProtos indicate the version of the IR syntax and semantics
     * they adhere to. It is always IR_VERSION.
     * This field MUST be present in this version of the IR
     * </pre>
     *
     * <code>int64 ir_version = 2;</code>
     */
    public long getIrVersion() {
      return irVersion_;
    }

    public static final int IR_VERSION_PRERELEASE_FIELD_NUMBER = 3;
    private volatile java.lang.Object irVersionPrerelease_;
    /**
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_version_prerelease = 3;</code>
     */
    public java.lang.String getIrVersionPrerelease() {
      java.lang.Object ref = irVersionPrerelease_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        irVersionPrerelease_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The prerelease component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_version_prerelease = 3;</code>
     */
    public com.google.protobuf.ByteString
        getIrVersionPrereleaseBytes() {
      java.lang.Object ref = irVersionPrerelease_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        irVersionPrerelease_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IR_BUILD_METADATA_FIELD_NUMBER = 7;
    private volatile java.lang.Object irBuildMetadata_;
    /**
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_build_metadata = 7;</code>
     */
    public java.lang.String getIrBuildMetadata() {
      java.lang.Object ref = irBuildMetadata_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        irBuildMetadata_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The build metadata component of the SemVer of the IR.
     * This field MAY be absent in this version of the IR
     * </pre>
     *
     * <code>string ir_build_metadata = 7;</code>
     */
    public com.google.protobuf.ByteString
        getIrBuildMetadataBytes() {
      java.lang.Object ref = irBuildMetadata_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        irBuildMetadata_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DOMAIN_FIELD_NUMBER = 4;
    private volatile java.lang.Object domain_;
    /**
     * <pre>
     * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     *
     * <code>string domain = 4;</code>
     */
    public java.lang.String getDomain() {
      java.lang.Object ref = domain_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        domain_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
     * </pre>
     *
     * <code>string domain = 4;</code>
     */
    public com.google.protobuf.ByteString
        getDomainBytes() {
      java.lang.Object ref = domain_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        domain_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OPSET_VERSION_FIELD_NUMBER = 5;
    private long opsetVersion_;
    /**
     * <pre>
     * The version of the set of operators. This is a simple int value
     * that is monotonically increasing as new versions of operator set
     * are published. All operators in this set MUST have version
     * numbers no greater than opset_version.
     * </pre>
     *
     * <code>int64 opset_version = 5;</code>
     */
    public long getOpsetVersion() {
      return opsetVersion_;
    }

    public static final int DOC_STRING_FIELD_NUMBER = 6;
    private volatile java.lang.Object docString_;
    /**
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 6;</code>
     */
    public java.lang.String getDocString() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        docString_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A human-readable documentation for this set of operators. Markdown is allowed.
     * </pre>
     *
     * <code>string doc_string = 6;</code>
     */
    public com.google.protobuf.ByteString
        getDocStringBytes() {
      java.lang.Object ref = docString_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        docString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OPERATOR_FIELD_NUMBER = 8;
    private java.util.List<org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto> operator_;
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    public java.util.List<org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto> getOperatorList() {
      return operator_;
    }
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    public java.util.List<? extends org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProtoOrBuilder> 
        getOperatorOrBuilderList() {
      return operator_;
    }
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    public int getOperatorCount() {
      return operator_.size();
    }
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto getOperator(int index) {
      return operator_.get(index);
    }
    /**
     * <pre>
     * The operators specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos in operator
     * </pre>
     *
     * <code>repeated .onnx.OperatorProto operator = 8;</code>
     */
    public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProtoOrBuilder getOperatorOrBuilder(
        int index) {
      return operator_.get(index);
    }

    public static final int FUNCTIONS_FIELD_NUMBER = 9;
    private java.util.List<org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto> functions_;
    /**
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     *
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     */
    public java.util.List<org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto> getFunctionsList() {
      return functions_;
    }
    /**
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     *
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     */
    public java.util.List<? extends org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProtoOrBuilder> 
        getFunctionsOrBuilderList() {
      return functions_;
    }
    /**
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     *
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     */
    public int getFunctionsCount() {
      return functions_.size();
    }
    /**
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     *
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     */
    public org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto getFunctions(int index) {
      return functions_.get(index);
    }
    /**
     * <pre>
     * The functions specified by this operator set.
     * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
     * </pre>
     *
     * <code>repeated .onnx.FunctionProto functions = 9;</code>
     */
    public org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProtoOrBuilder getFunctionsOrBuilder(
        int index) {
      return functions_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getMagicBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, magic_);
      }
      if (irVersion_ != 0L) {
        output.writeInt64(2, irVersion_);
      }
      if (!getIrVersionPrereleaseBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, irVersionPrerelease_);
      }
      if (!getDomainBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, domain_);
      }
      if (opsetVersion_ != 0L) {
        output.writeInt64(5, opsetVersion_);
      }
      if (!getDocStringBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, docString_);
      }
      if (!getIrBuildMetadataBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, irBuildMetadata_);
      }
      for (int i = 0; i < operator_.size(); i++) {
        output.writeMessage(8, operator_.get(i));
      }
      for (int i = 0; i < functions_.size(); i++) {
        output.writeMessage(9, functions_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getMagicBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, magic_);
      }
      if (irVersion_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, irVersion_);
      }
      if (!getIrVersionPrereleaseBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, irVersionPrerelease_);
      }
      if (!getDomainBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, domain_);
      }
      if (opsetVersion_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, opsetVersion_);
      }
      if (!getDocStringBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, docString_);
      }
      if (!getIrBuildMetadataBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, irBuildMetadata_);
      }
      for (int i = 0; i < operator_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, operator_.get(i));
      }
      for (int i = 0; i < functions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, functions_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto)) {
        return super.equals(obj);
      }
      org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto other = (org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto) obj;

      if (!getMagic()
          .equals(other.getMagic())) return false;
      if (getIrVersion()
          != other.getIrVersion()) return false;
      if (!getIrVersionPrerelease()
          .equals(other.getIrVersionPrerelease())) return false;
      if (!getIrBuildMetadata()
          .equals(other.getIrBuildMetadata())) return false;
      if (!getDomain()
          .equals(other.getDomain())) return false;
      if (getOpsetVersion()
          != other.getOpsetVersion()) return false;
      if (!getDocString()
          .equals(other.getDocString())) return false;
      if (!getOperatorList()
          .equals(other.getOperatorList())) return false;
      if (!getFunctionsList()
          .equals(other.getFunctionsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MAGIC_FIELD_NUMBER;
      hash = (53 * hash) + getMagic().hashCode();
      hash = (37 * hash) + IR_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getIrVersion());
      hash = (37 * hash) + IR_VERSION_PRERELEASE_FIELD_NUMBER;
      hash = (53 * hash) + getIrVersionPrerelease().hashCode();
      hash = (37 * hash) + IR_BUILD_METADATA_FIELD_NUMBER;
      hash = (53 * hash) + getIrBuildMetadata().hashCode();
      hash = (37 * hash) + DOMAIN_FIELD_NUMBER;
      hash = (53 * hash) + getDomain().hashCode();
      hash = (37 * hash) + OPSET_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getOpsetVersion());
      hash = (37 * hash) + DOC_STRING_FIELD_NUMBER;
      hash = (53 * hash) + getDocString().hashCode();
      if (getOperatorCount() > 0) {
        hash = (37 * hash) + OPERATOR_FIELD_NUMBER;
        hash = (53 * hash) + getOperatorList().hashCode();
      }
      if (getFunctionsCount() > 0) {
        hash = (37 * hash) + FUNCTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getFunctionsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An OperatorSetProto represents an immutable set of immutable operator
     * specifications.
     * The domain of the set (OperatorSetProto.domain) is a reverse-DNS name
     * that disambiguates operator sets defined by independent entities.
     * The version of the set (opset_version) is a monotonically increasing
     * integer that indicates changes to the membership of the operator set.
     * Operator sets are uniquely identified by a two part identifier (domain, opset_version)
     * Like ModelProto, OperatorSetProto is intended as a top-level file/wire format,
     * and thus has the standard format headers in addition to the operator set information.
     * </pre>
     *
     * Protobuf type {@code onnx.OperatorSetProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:onnx.OperatorSetProto)
        org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_OperatorSetProto_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_OperatorSetProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto.class, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto.Builder.class);
      }

      // Construct using onnx.OnnxOperatorsProto3.OperatorSetProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getOperatorFieldBuilder();
          getFunctionsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        magic_ = "";

        irVersion_ = 0L;

        irVersionPrerelease_ = "";

        irBuildMetadata_ = "";

        domain_ = "";

        opsetVersion_ = 0L;

        docString_ = "";

        if (operatorBuilder_ == null) {
          operator_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          operatorBuilder_.clear();
        }
        if (functionsBuilder_ == null) {
          functions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          functionsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.onnx4j.prototypes.OnnxOperatorsProto3.internal_static_onnx_OperatorSetProto_descriptor;
      }

      @java.lang.Override
      public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto getDefaultInstanceForType() {
        return org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto.getDefaultInstance();
      }

      @java.lang.Override
      public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto build() {
        org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto buildPartial() {
        org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto result = new org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto(this);
        int from_bitField0_ = bitField0_;
        result.magic_ = magic_;
        result.irVersion_ = irVersion_;
        result.irVersionPrerelease_ = irVersionPrerelease_;
        result.irBuildMetadata_ = irBuildMetadata_;
        result.domain_ = domain_;
        result.opsetVersion_ = opsetVersion_;
        result.docString_ = docString_;
        if (operatorBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            operator_ = java.util.Collections.unmodifiableList(operator_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.operator_ = operator_;
        } else {
          result.operator_ = operatorBuilder_.build();
        }
        if (functionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            functions_ = java.util.Collections.unmodifiableList(functions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.functions_ = functions_;
        } else {
          result.functions_ = functionsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto) {
          return mergeFrom((org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto other) {
        if (other == org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto.getDefaultInstance()) return this;
        if (!other.getMagic().isEmpty()) {
          magic_ = other.magic_;
          onChanged();
        }
        if (other.getIrVersion() != 0L) {
          setIrVersion(other.getIrVersion());
        }
        if (!other.getIrVersionPrerelease().isEmpty()) {
          irVersionPrerelease_ = other.irVersionPrerelease_;
          onChanged();
        }
        if (!other.getIrBuildMetadata().isEmpty()) {
          irBuildMetadata_ = other.irBuildMetadata_;
          onChanged();
        }
        if (!other.getDomain().isEmpty()) {
          domain_ = other.domain_;
          onChanged();
        }
        if (other.getOpsetVersion() != 0L) {
          setOpsetVersion(other.getOpsetVersion());
        }
        if (!other.getDocString().isEmpty()) {
          docString_ = other.docString_;
          onChanged();
        }
        if (operatorBuilder_ == null) {
          if (!other.operator_.isEmpty()) {
            if (operator_.isEmpty()) {
              operator_ = other.operator_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureOperatorIsMutable();
              operator_.addAll(other.operator_);
            }
            onChanged();
          }
        } else {
          if (!other.operator_.isEmpty()) {
            if (operatorBuilder_.isEmpty()) {
              operatorBuilder_.dispose();
              operatorBuilder_ = null;
              operator_ = other.operator_;
              bitField0_ = (bitField0_ & ~0x00000001);
              operatorBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getOperatorFieldBuilder() : null;
            } else {
              operatorBuilder_.addAllMessages(other.operator_);
            }
          }
        }
        if (functionsBuilder_ == null) {
          if (!other.functions_.isEmpty()) {
            if (functions_.isEmpty()) {
              functions_ = other.functions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureFunctionsIsMutable();
              functions_.addAll(other.functions_);
            }
            onChanged();
          }
        } else {
          if (!other.functions_.isEmpty()) {
            if (functionsBuilder_.isEmpty()) {
              functionsBuilder_.dispose();
              functionsBuilder_ = null;
              functions_ = other.functions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              functionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFunctionsFieldBuilder() : null;
            } else {
              functionsBuilder_.addAllMessages(other.functions_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object magic_ = "";
      /**
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>string magic = 1;</code>
       */
      public java.lang.String getMagic() {
        java.lang.Object ref = magic_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          magic_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>string magic = 1;</code>
       */
      public com.google.protobuf.ByteString
          getMagicBytes() {
        java.lang.Object ref = magic_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          magic_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>string magic = 1;</code>
       */
      public Builder setMagic(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        magic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>string magic = 1;</code>
       */
      public Builder clearMagic() {
        
        magic_ = getDefaultInstance().getMagic();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All OperatorSetProtos start with a distingushed byte sequence to disambiguate
       * protobuf files containing OperatorSets from other content.
       * This field MUST be "ONNXOPSET"
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>string magic = 1;</code>
       */
      public Builder setMagicBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        magic_ = value;
        onChanged();
        return this;
      }

      private long irVersion_ ;
      /**
       * <pre>
       * All OperatorSetProtos indicate the version of the IR syntax and semantics
       * they adhere to. It is always IR_VERSION.
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>int64 ir_version = 2;</code>
       */
      public long getIrVersion() {
        return irVersion_;
      }
      /**
       * <pre>
       * All OperatorSetProtos indicate the version of the IR syntax and semantics
       * they adhere to. It is always IR_VERSION.
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>int64 ir_version = 2;</code>
       */
      public Builder setIrVersion(long value) {
        
        irVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All OperatorSetProtos indicate the version of the IR syntax and semantics
       * they adhere to. It is always IR_VERSION.
       * This field MUST be present in this version of the IR
       * </pre>
       *
       * <code>int64 ir_version = 2;</code>
       */
      public Builder clearIrVersion() {
        
        irVersion_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object irVersionPrerelease_ = "";
      /**
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_version_prerelease = 3;</code>
       */
      public java.lang.String getIrVersionPrerelease() {
        java.lang.Object ref = irVersionPrerelease_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          irVersionPrerelease_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_version_prerelease = 3;</code>
       */
      public com.google.protobuf.ByteString
          getIrVersionPrereleaseBytes() {
        java.lang.Object ref = irVersionPrerelease_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          irVersionPrerelease_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_version_prerelease = 3;</code>
       */
      public Builder setIrVersionPrerelease(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        irVersionPrerelease_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_version_prerelease = 3;</code>
       */
      public Builder clearIrVersionPrerelease() {
        
        irVersionPrerelease_ = getDefaultInstance().getIrVersionPrerelease();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The prerelease component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_version_prerelease = 3;</code>
       */
      public Builder setIrVersionPrereleaseBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        irVersionPrerelease_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object irBuildMetadata_ = "";
      /**
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_build_metadata = 7;</code>
       */
      public java.lang.String getIrBuildMetadata() {
        java.lang.Object ref = irBuildMetadata_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          irBuildMetadata_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_build_metadata = 7;</code>
       */
      public com.google.protobuf.ByteString
          getIrBuildMetadataBytes() {
        java.lang.Object ref = irBuildMetadata_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          irBuildMetadata_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_build_metadata = 7;</code>
       */
      public Builder setIrBuildMetadata(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        irBuildMetadata_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_build_metadata = 7;</code>
       */
      public Builder clearIrBuildMetadata() {
        
        irBuildMetadata_ = getDefaultInstance().getIrBuildMetadata();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The build metadata component of the SemVer of the IR.
       * This field MAY be absent in this version of the IR
       * </pre>
       *
       * <code>string ir_build_metadata = 7;</code>
       */
      public Builder setIrBuildMetadataBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        irBuildMetadata_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object domain_ = "";
      /**
       * <pre>
       * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       *
       * <code>string domain = 4;</code>
       */
      public java.lang.String getDomain() {
        java.lang.Object ref = domain_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          domain_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       *
       * <code>string domain = 4;</code>
       */
      public com.google.protobuf.ByteString
          getDomainBytes() {
        java.lang.Object ref = domain_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          domain_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       *
       * <code>string domain = 4;</code>
       */
      public Builder setDomain(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        domain_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       *
       * <code>string domain = 4;</code>
       */
      public Builder clearDomain() {
        
        domain_ = getDefaultInstance().getDomain();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Domain name of the operator set, in reverse DNS form (e.g., com.acme.dnnops).
       * </pre>
       *
       * <code>string domain = 4;</code>
       */
      public Builder setDomainBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        domain_ = value;
        onChanged();
        return this;
      }

      private long opsetVersion_ ;
      /**
       * <pre>
       * The version of the set of operators. This is a simple int value
       * that is monotonically increasing as new versions of operator set
       * are published. All operators in this set MUST have version
       * numbers no greater than opset_version.
       * </pre>
       *
       * <code>int64 opset_version = 5;</code>
       */
      public long getOpsetVersion() {
        return opsetVersion_;
      }
      /**
       * <pre>
       * The version of the set of operators. This is a simple int value
       * that is monotonically increasing as new versions of operator set
       * are published. All operators in this set MUST have version
       * numbers no greater than opset_version.
       * </pre>
       *
       * <code>int64 opset_version = 5;</code>
       */
      public Builder setOpsetVersion(long value) {
        
        opsetVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The version of the set of operators. This is a simple int value
       * that is monotonically increasing as new versions of operator set
       * are published. All operators in this set MUST have version
       * numbers no greater than opset_version.
       * </pre>
       *
       * <code>int64 opset_version = 5;</code>
       */
      public Builder clearOpsetVersion() {
        
        opsetVersion_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object docString_ = "";
      /**
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 6;</code>
       */
      public java.lang.String getDocString() {
        java.lang.Object ref = docString_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          docString_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 6;</code>
       */
      public com.google.protobuf.ByteString
          getDocStringBytes() {
        java.lang.Object ref = docString_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          docString_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 6;</code>
       */
      public Builder setDocString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        docString_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 6;</code>
       */
      public Builder clearDocString() {
        
        docString_ = getDefaultInstance().getDocString();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A human-readable documentation for this set of operators. Markdown is allowed.
       * </pre>
       *
       * <code>string doc_string = 6;</code>
       */
      public Builder setDocStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        docString_ = value;
        onChanged();
        return this;
      }

      private java.util.List<org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto> operator_ =
        java.util.Collections.emptyList();
      private void ensureOperatorIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          operator_ = new java.util.ArrayList<org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto>(operator_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.Builder, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProtoOrBuilder> operatorBuilder_;

      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public java.util.List<org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto> getOperatorList() {
        if (operatorBuilder_ == null) {
          return java.util.Collections.unmodifiableList(operator_);
        } else {
          return operatorBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public int getOperatorCount() {
        if (operatorBuilder_ == null) {
          return operator_.size();
        } else {
          return operatorBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto getOperator(int index) {
        if (operatorBuilder_ == null) {
          return operator_.get(index);
        } else {
          return operatorBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder setOperator(
          int index, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto value) {
        if (operatorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOperatorIsMutable();
          operator_.set(index, value);
          onChanged();
        } else {
          operatorBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder setOperator(
          int index, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.Builder builderForValue) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          operator_.set(index, builderForValue.build());
          onChanged();
        } else {
          operatorBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder addOperator(org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto value) {
        if (operatorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOperatorIsMutable();
          operator_.add(value);
          onChanged();
        } else {
          operatorBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder addOperator(
          int index, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto value) {
        if (operatorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOperatorIsMutable();
          operator_.add(index, value);
          onChanged();
        } else {
          operatorBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder addOperator(
          org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.Builder builderForValue) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          operator_.add(builderForValue.build());
          onChanged();
        } else {
          operatorBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder addOperator(
          int index, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.Builder builderForValue) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          operator_.add(index, builderForValue.build());
          onChanged();
        } else {
          operatorBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder addAllOperator(
          java.lang.Iterable<? extends org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto> values) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, operator_);
          onChanged();
        } else {
          operatorBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder clearOperator() {
        if (operatorBuilder_ == null) {
          operator_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          operatorBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public Builder removeOperator(int index) {
        if (operatorBuilder_ == null) {
          ensureOperatorIsMutable();
          operator_.remove(index);
          onChanged();
        } else {
          operatorBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.Builder getOperatorBuilder(
          int index) {
        return getOperatorFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProtoOrBuilder getOperatorOrBuilder(
          int index) {
        if (operatorBuilder_ == null) {
          return operator_.get(index);  } else {
          return operatorBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public java.util.List<? extends org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProtoOrBuilder> 
           getOperatorOrBuilderList() {
        if (operatorBuilder_ != null) {
          return operatorBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(operator_);
        }
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.Builder addOperatorBuilder() {
        return getOperatorFieldBuilder().addBuilder(
            org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.getDefaultInstance());
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.Builder addOperatorBuilder(
          int index) {
        return getOperatorFieldBuilder().addBuilder(
            index, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.getDefaultInstance());
      }
      /**
       * <pre>
       * The operators specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos in operator
       * </pre>
       *
       * <code>repeated .onnx.OperatorProto operator = 8;</code>
       */
      public java.util.List<org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.Builder> 
           getOperatorBuilderList() {
        return getOperatorFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.Builder, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProtoOrBuilder> 
          getOperatorFieldBuilder() {
        if (operatorBuilder_ == null) {
          operatorBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProto.Builder, org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorProtoOrBuilder>(
                  operator_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          operator_ = null;
        }
        return operatorBuilder_;
      }

      private java.util.List<org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto> functions_ =
        java.util.Collections.emptyList();
      private void ensureFunctionsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          functions_ = new java.util.ArrayList<org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto>(functions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto, org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.Builder, org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProtoOrBuilder> functionsBuilder_;

      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public java.util.List<org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto> getFunctionsList() {
        if (functionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(functions_);
        } else {
          return functionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public int getFunctionsCount() {
        if (functionsBuilder_ == null) {
          return functions_.size();
        } else {
          return functionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto getFunctions(int index) {
        if (functionsBuilder_ == null) {
          return functions_.get(index);
        } else {
          return functionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public Builder setFunctions(
          int index, org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto value) {
        if (functionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionsIsMutable();
          functions_.set(index, value);
          onChanged();
        } else {
          functionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public Builder setFunctions(
          int index, org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.Builder builderForValue) {
        if (functionsBuilder_ == null) {
          ensureFunctionsIsMutable();
          functions_.set(index, builderForValue.build());
          onChanged();
        } else {
          functionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public Builder addFunctions(org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto value) {
        if (functionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionsIsMutable();
          functions_.add(value);
          onChanged();
        } else {
          functionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public Builder addFunctions(
          int index, org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto value) {
        if (functionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionsIsMutable();
          functions_.add(index, value);
          onChanged();
        } else {
          functionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public Builder addFunctions(
          org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.Builder builderForValue) {
        if (functionsBuilder_ == null) {
          ensureFunctionsIsMutable();
          functions_.add(builderForValue.build());
          onChanged();
        } else {
          functionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public Builder addFunctions(
          int index, org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.Builder builderForValue) {
        if (functionsBuilder_ == null) {
          ensureFunctionsIsMutable();
          functions_.add(index, builderForValue.build());
          onChanged();
        } else {
          functionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public Builder addAllFunctions(
          java.lang.Iterable<? extends org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto> values) {
        if (functionsBuilder_ == null) {
          ensureFunctionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, functions_);
          onChanged();
        } else {
          functionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public Builder clearFunctions() {
        if (functionsBuilder_ == null) {
          functions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          functionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public Builder removeFunctions(int index) {
        if (functionsBuilder_ == null) {
          ensureFunctionsIsMutable();
          functions_.remove(index);
          onChanged();
        } else {
          functionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.Builder getFunctionsBuilder(
          int index) {
        return getFunctionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProtoOrBuilder getFunctionsOrBuilder(
          int index) {
        if (functionsBuilder_ == null) {
          return functions_.get(index);  } else {
          return functionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public java.util.List<? extends org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProtoOrBuilder> 
           getFunctionsOrBuilderList() {
        if (functionsBuilder_ != null) {
          return functionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(functions_);
        }
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.Builder addFunctionsBuilder() {
        return getFunctionsFieldBuilder().addBuilder(
            org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.getDefaultInstance());
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.Builder addFunctionsBuilder(
          int index) {
        return getFunctionsFieldBuilder().addBuilder(
            index, org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.getDefaultInstance());
      }
      /**
       * <pre>
       * The functions specified by this operator set.
       * The (name, version) MUST be unique across all OperatorProtos/FunctionProtos in operator/functions
       * </pre>
       *
       * <code>repeated .onnx.FunctionProto functions = 9;</code>
       */
      public java.util.List<org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.Builder> 
           getFunctionsBuilderList() {
        return getFunctionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto, org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.Builder, org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProtoOrBuilder> 
          getFunctionsFieldBuilder() {
        if (functionsBuilder_ == null) {
          functionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto, org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProto.Builder, org.onnx4j.prototypes.OnnxOperatorsProto3.FunctionProtoOrBuilder>(
                  functions_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          functions_ = null;
        }
        return functionsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:onnx.OperatorSetProto)
    }

    // @@protoc_insertion_point(class_scope:onnx.OperatorSetProto)
    private static final org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto();
    }

    public static org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OperatorSetProto>
        PARSER = new com.google.protobuf.AbstractParser<OperatorSetProto>() {
      @java.lang.Override
      public OperatorSetProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OperatorSetProto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<OperatorSetProto> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OperatorSetProto> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public org.onnx4j.prototypes.OnnxOperatorsProto3.OperatorSetProto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_onnx_FunctionProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_onnx_FunctionProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_onnx_OperatorProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_onnx_OperatorProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_onnx_OperatorSetProto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_onnx_OperatorSetProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\032onnx/onnx-operators.proto3\022\004onnx\032\020onnx" +
      "/onnx.proto3\"\277\001\n\rFunctionProto\022\014\n\004name\030\001" +
      " \001(\t\022\025\n\rsince_version\030\002 \001(\003\022$\n\006status\030\003 " +
      "\001(\0162\024.onnx.OperatorStatus\022\r\n\005input\030\004 \003(\t" +
      "\022\016\n\006output\030\005 \003(\t\022\021\n\tattribute\030\006 \003(\t\022\035\n\004n" +
      "ode\030\007 \003(\0132\017.onnx.NodeProto\022\022\n\ndoc_string" +
      "\030\010 \001(\t\"q\n\rOperatorProto\022\017\n\007op_type\030\001 \001(\t" +
      "\022\025\n\rsince_version\030\002 \001(\003\022$\n\006status\030\003 \001(\0162" +
      "\024.onnx.OperatorStatus\022\022\n\ndoc_string\030\n \001(" +
      "\t\"\371\001\n\020OperatorSetProto\022\r\n\005magic\030\001 \001(\t\022\022\n" +
      "\nir_version\030\002 \001(\003\022\035\n\025ir_version_prerelea" +
      "se\030\003 \001(\t\022\031\n\021ir_build_metadata\030\007 \001(\t\022\016\n\006d" +
      "omain\030\004 \001(\t\022\025\n\ropset_version\030\005 \001(\003\022\022\n\ndo" +
      "c_string\030\006 \001(\t\022%\n\010operator\030\010 \003(\0132\023.onnx." +
      "OperatorProto\022&\n\tfunctions\030\t \003(\0132\023.onnx." +
      "FunctionProto*.\n\016OperatorStatus\022\020\n\014EXPER" +
      "IMENTAL\020\000\022\n\n\006STABLE\020\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.onnx4j.prototypes.OnnxProto3.getDescriptor(),
        });
    internal_static_onnx_FunctionProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_onnx_FunctionProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_onnx_FunctionProto_descriptor,
        new java.lang.String[] { "Name", "SinceVersion", "Status", "Input", "Output", "Attribute", "Node", "DocString", });
    internal_static_onnx_OperatorProto_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_onnx_OperatorProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_onnx_OperatorProto_descriptor,
        new java.lang.String[] { "OpType", "SinceVersion", "Status", "DocString", });
    internal_static_onnx_OperatorSetProto_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_onnx_OperatorSetProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_onnx_OperatorSetProto_descriptor,
        new java.lang.String[] { "Magic", "IrVersion", "IrVersionPrerelease", "IrBuildMetadata", "Domain", "OpsetVersion", "DocString", "Operator", "Functions", });
    org.onnx4j.prototypes.OnnxProto3.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
